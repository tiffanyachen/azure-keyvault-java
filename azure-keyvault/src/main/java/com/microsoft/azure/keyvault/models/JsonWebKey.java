/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package keyvault.models;

import java.util.List;
import com.microsoft.rest.Base64Url;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * As of http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18.
 */
public class JsonWebKey {
    /**
     * Key identifier.
     */
    @JsonProperty(value = "kid")
    private String kid;

    /**
     * Supported JsonWebKey key types (kty) for Elliptic Curve, RSA, HSM,
     * Octet. Kty is usually set to RSA. Possible values include: 'EC', 'RSA',
     * 'RSA-HSM', 'oct'.
     */
    @JsonProperty(value = "kty")
    private JsonWebKeyType kty;

    /**
     * The keyOps property.
     */
    @JsonProperty(value = "key_ops")
    private List<String> keyOps;

    /**
     * RSA modulus.
     */
    @JsonProperty(value = "n")
    private Base64Url n;

    /**
     * RSA public exponent.
     */
    @JsonProperty(value = "e")
    private Base64Url e;

    /**
     * RSA private exponent.
     */
    @JsonProperty(value = "d")
    private Base64Url d;

    /**
     * RSA private key parameter.
     */
    @JsonProperty(value = "dp")
    private Base64Url dp;

    /**
     * RSA private key parameter.
     */
    @JsonProperty(value = "dq")
    private Base64Url dq;

    /**
     * RSA private key parameter.
     */
    @JsonProperty(value = "qi")
    private Base64Url qi;

    /**
     * RSA secret prime.
     */
    @JsonProperty(value = "p")
    private Base64Url p;

    /**
     * RSA secret prime, with p &lt; q.
     */
    @JsonProperty(value = "q")
    private Base64Url q;

    /**
     * Symmetric key.
     */
    @JsonProperty(value = "k")
    private Base64Url k;

    /**
     * HSM Token, used with 'Bring Your Own Key'.
     */
    @JsonProperty(value = "key_hsm")
    private Base64Url t;

    /**
     * Get the kid value.
     *
     * @return the kid value
     */
    public String kid() {
        return this.kid;
    }

    /**
     * Set the kid value.
     *
     * @param kid the kid value to set
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withKid(String kid) {
        this.kid = kid;
        return this;
    }

    /**
     * Get the kty value.
     *
     * @return the kty value
     */
    public JsonWebKeyType kty() {
        return this.kty;
    }

    /**
     * Set the kty value.
     *
     * @param kty the kty value to set
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withKty(JsonWebKeyType kty) {
        this.kty = kty;
        return this;
    }

    /**
     * Get the keyOps value.
     *
     * @return the keyOps value
     */
    public List<String> keyOps() {
        return this.keyOps;
    }

    /**
     * Set the keyOps value.
     *
     * @param keyOps the keyOps value to set
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withKeyOps(List<String> keyOps) {
        this.keyOps = keyOps;
        return this;
    }

    /**
     * Get the n value.
     *
     * @return the n value
     */
    public byte[] n() {
        if (this.n == null) {
            return null;
        }
        return this.n.decodedBytes();
    }

    /**
     * Set the n value.
     *
     * @param n the n value to set
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withN(byte[] n) {
        if (n == null) {
            this.n = null;
        } else {
            this.n = Base64Url.encode(n);
        }
        return this;
    }

    /**
     * Get the e value.
     *
     * @return the e value
     */
    public byte[] e() {
        if (this.e == null) {
            return null;
        }
        return this.e.decodedBytes();
    }

    /**
     * Set the e value.
     *
     * @param e the e value to set
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withE(byte[] e) {
        if (e == null) {
            this.e = null;
        } else {
            this.e = Base64Url.encode(e);
        }
        return this;
    }

    /**
     * Get the d value.
     *
     * @return the d value
     */
    public byte[] d() {
        if (this.d == null) {
            return null;
        }
        return this.d.decodedBytes();
    }

    /**
     * Set the d value.
     *
     * @param d the d value to set
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withD(byte[] d) {
        if (d == null) {
            this.d = null;
        } else {
            this.d = Base64Url.encode(d);
        }
        return this;
    }

    /**
     * Get the dp value.
     *
     * @return the dp value
     */
    public byte[] dp() {
        if (this.dp == null) {
            return null;
        }
        return this.dp.decodedBytes();
    }

    /**
     * Set the dp value.
     *
     * @param dp the dp value to set
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withDp(byte[] dp) {
        if (dp == null) {
            this.dp = null;
        } else {
            this.dp = Base64Url.encode(dp);
        }
        return this;
    }

    /**
     * Get the dq value.
     *
     * @return the dq value
     */
    public byte[] dq() {
        if (this.dq == null) {
            return null;
        }
        return this.dq.decodedBytes();
    }

    /**
     * Set the dq value.
     *
     * @param dq the dq value to set
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withDq(byte[] dq) {
        if (dq == null) {
            this.dq = null;
        } else {
            this.dq = Base64Url.encode(dq);
        }
        return this;
    }

    /**
     * Get the qi value.
     *
     * @return the qi value
     */
    public byte[] qi() {
        if (this.qi == null) {
            return null;
        }
        return this.qi.decodedBytes();
    }

    /**
     * Set the qi value.
     *
     * @param qi the qi value to set
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withQi(byte[] qi) {
        if (qi == null) {
            this.qi = null;
        } else {
            this.qi = Base64Url.encode(qi);
        }
        return this;
    }

    /**
     * Get the p value.
     *
     * @return the p value
     */
    public byte[] p() {
        if (this.p == null) {
            return null;
        }
        return this.p.decodedBytes();
    }

    /**
     * Set the p value.
     *
     * @param p the p value to set
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withP(byte[] p) {
        if (p == null) {
            this.p = null;
        } else {
            this.p = Base64Url.encode(p);
        }
        return this;
    }

    /**
     * Get the q value.
     *
     * @return the q value
     */
    public byte[] q() {
        if (this.q == null) {
            return null;
        }
        return this.q.decodedBytes();
    }

    /**
     * Set the q value.
     *
     * @param q the q value to set
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withQ(byte[] q) {
        if (q == null) {
            this.q = null;
        } else {
            this.q = Base64Url.encode(q);
        }
        return this;
    }

    /**
     * Get the k value.
     *
     * @return the k value
     */
    public byte[] k() {
        if (this.k == null) {
            return null;
        }
        return this.k.decodedBytes();
    }

    /**
     * Set the k value.
     *
     * @param k the k value to set
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withK(byte[] k) {
        if (k == null) {
            this.k = null;
        } else {
            this.k = Base64Url.encode(k);
        }
        return this;
    }

    /**
     * Get the t value.
     *
     * @return the t value
     */
    public byte[] t() {
        if (this.t == null) {
            return null;
        }
        return this.t.decodedBytes();
    }

    /**
     * Set the t value.
     *
     * @param t the t value to set
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withT(byte[] t) {
        if (t == null) {
            this.t = null;
        } else {
            this.t = Base64Url.encode(t);
        }
        return this;
    }

}
